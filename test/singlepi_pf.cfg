process USER =  {
    
    #keep the logging output to a nice level
    #include "FWCore/MessageLogger/data/MessageLogger.cfi"
    service = MessageLogger
    {
	untracked vstring destinations = {"cout"}
	
	untracked vstring categories = {
	    "PFProducer"
	}
	untracked vstring debugModules = { "pf" }
	untracked PSet cout = {
	    #	untracked string threshold = "DEBUG"
	    untracked string threshold = "INFO"
	    untracked PSet INFO = { untracked int32 limit = -1 }
	    untracked PSet DEBUG = { untracked int32 limit = -1 }
	    untracked PSet PFProducer = { untracked int32 limit = 1000000 }
	}
    }
    
    source = PoolSource
    {
	# Number of events program should run
	untracked vstring fileNames = {'file:singlepi_reco.root'}
	untracked int32 maxEvents = -1
    }
    
    

    include "RecoParticleFlow/PFClusterProducer/data/pFClusterDefaults.cff"
    include "RecoParticleFlow/PFProducer/data/pFDefaults.cff"

    module o2 = PoolOutputModule
    {
	untracked string fileName = "singlepi_pf.root" 
	untracked vstring outputCommands = 
	{
	    "drop *",
	    "keep recoPFRecHits_*_*_*",
	    "keep recoPFClusters_*_*_*",
	    "keep recoPFRecTracks_*_*_*",
	    "keep recoPFParticles_*_*_*"			
	}
    }
    
    module dump = EventContentAnalyzer {}
    
    # path p = { dump }
    path p = { particleFlowCluster, particleFlow } 
    # path p = { particleFlow } 
    
    endpath outpath = { o2 }
}
