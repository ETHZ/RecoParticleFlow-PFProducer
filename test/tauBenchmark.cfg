process FLOW = {

    
    service = MessageLogger  {
	untracked vstring destinations   = { "cout" }
	untracked vstring categories     = { 
	    "PFProducer"
	}
	untracked vstring debugModules   = { "*" }
	untracked PSet cout = { 
	    untracked string threshold = "ERROR"
	    untracked PSet INFO            = { untracked int32 limit = 0 }
	    untracked PSet DEBUG           = { untracked int32 limit = 0 }
	    untracked PSet PFProducer = { untracked int32 limit = 10000000}
	    untracked PSet TauBenchmarkAnalyzer = { untracked int32 limit = 0}
	} 
    }
    
    
    # to generate this input file : 
    # cd   ../../PFBlockProducer/test/
    # cmsRun ditau_read_fevt.cfg
    source = PoolSource {
        untracked vstring fileNames = { 'rfio:/castor/cern.ch/user/c/cbern/CMSSW/CMSSW_1_3_1/Taus/BatchOut_11May2007_133551/out_singletau_fevt_10.root'	}
	untracked int32 maxEvents = -1
    }
    

    include "RecoParticleFlow/PFProducer/data/particleFlow.cff"

    ###############################
    module GEN-SIM-DIGI-RECO = PoolOutputModule
    {
	untracked string fileName = "tauBenchmark.root" 
	untracked vstring outputCommands = 
	{
            "drop *",
            "keep recoPFRecHits_*_*_*",
            "keep recoPFClusters_*_*_*",
            "keep recoPFRecTracks_*_*_*",
            "keep recoPFSimParticles_*_*_*",
	    "keep recoPFBlocks_*_*_*",
	    "keep recoPFCandidates_*_*_*",
	    "keep recoCandidatesOwned_*_*_*",	    
	    "keep recoBasicJets_*_*_*",
	    "keep recoTracks_*_*_*",
	    "keep recoCaloJets_*_*_*"
	}
    }


    module tauAnalyzer = TauBenchmarkAnalyzer {
	untracked string outputRootFileName = "test.root"
    }

    # module dump = EventContentAnalyzer {}

    ###############################

    path p = { 
#	dump,
	particleFlow, 
	particleFlowJetCandidates, 
	iterativeCone5PFJets, 
	Fastjet10PFJets,
	tauAnalyzer
    }

    endpath outpath = {GEN-SIM-DIGI-RECO}	

}
